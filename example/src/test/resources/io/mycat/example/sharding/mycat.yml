metadata: #元数据 升级计划:通过创建表的sql语句提供该信息免去繁琐配置,
  prototype: {targetName: defaultDs } #从该数据源获取元数据,该功能未开放
  schemas:
    db1: #逻辑库名
      shadingTables:
        travelrecord: #逻辑表名
          columns:
            - columnName: id #分片字段信息,显式提供,
              shardingType: NATURE_DATABASE_TABLE #类型:自然分片,即根据一列(支持)或者多个列(暂不支持)的值映射成一个值,再根据该值通过单维度的分片算法计算出数据分片范围
              function: { clazz: io.mycat.router.function.PartitionByLong , name: partitionByLong, properties: {partitionCount: '4', partitionLength: '256'}, ranges: {}}
              #提供表的字段信息,升级计划:通过已有数据库拉取该信息
          createTableSQL: |-
            CREATE TABLE `travelrecord` ( `id` bigint(20) NOT NULL AUTO_INCREMENT,`user_id` varchar(100) CHARACTER SET utf8 DEFAULT NULL,`traveldate` date DEFAULT NULL,`fee` decimal(10,0) DEFAULT NULL,`days` int(11) DEFAULT NULL,`blob` longblob DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
          dataNodes: [{targetName: defaultDs ,schemaName: db1, tableName: travelrecord},
                      {targetName: defaultDs ,schemaName: db1, tableName: travelrecord2},
                      {targetName: defaultDs ,schemaName: db1, tableName: travelrecord3},
                      {targetName: defaultDs2 ,schemaName: db2, tableName: travelrecord}] #9999999999
      globalTables:
        company:
          createTableSQL: CREATE TABLE `company` ( `id` int(11) NOT NULL AUTO_INCREMENT,`companyname` varchar(20) DEFAULT NULL,`addressid` int(11) DEFAULT NULL,PRIMARY KEY (`id`))
          dataNodes: [{targetName: defaultDs2 ,schemaName: db1, tableName: company},{targetName: defaultDs2 ,schemaName: db2, tableName: company}]
interceptors:
  [{user:{username: 'root' ,password: '123456' , ip: '.'},
    defaultHanlder: {command: execute , tags: {targets: defaultDs,forceProxy: true}},
    schemas: [{
                tables:[ 'db1.travelrecord','db1.company'],#sql中包含一个表名,注意sql中;分号,匹配规则,前缀确定唯一项,{前必须是固定的token,}后必须是固定的token,这两个token在上下文也能确定该项
                sqls: [
                {sql: 'select {any}',command: distributedQuery },# select id
                {sql: 'insert {any}',command: distributedInsert},
                {sql: 'update {any}',command: distributedUpdate},
                {sql: 'delete {any}',command: distributedDelete} ],
              },
    ],
    sqls:[] ,
    sqlsGroup: [*jdbcAdapter],
    transactionType: proxy  #xa.proxy
   }]
datasource:
  datasources: [{name: defaultDs, ip: 0.0.0.0,port: 3306,user: root,password: 123456,maxCon: 10000,minCon: 0,
                 maxRetryCount: 3, #连接重试次数
                 maxConnectTimeout: 10000, #连接超时时间 毫秒
                 dbType: mysql, #
                 url: 'jdbc:mysql://127.0.0.1:3306?useUnicode=true&serverTimezone=UTC',
                 weight: 1, #负载均衡权重
                 initSqls: []
                  , #建立连接后执行的sql,在此可以写上use xxx初始化默认database
                 jdbcDriverClass:, #jdbc驱动
                 instanceType:,#READ,WRITE,READ_WRITE ,集群信息中是主节点,则默认为读写,副本则为读,此属性可以强制指定可写,
                 initSqlsGetConnection: true
                },
                {name: defaultDs2, ip: 0.0.0.0,port: 3307,user: root,password: 123456,maxCon: 10000,minCon: 0,maxRetryCount: 3,maxConnectTimeout: 10000,dbType: mysql,
                 url: 'jdbc:mysql://127.0.0.1:3307?useUnicode=true&serverTimezone=UTC',weight: 1,initSqls: []
                  ,jdbcDriverClass:,instanceType:,#READ,WRITE,READ_WRITE
                  initSqlsGetConnection: true
                }
  ]
  datasourceProviderClass: io.mycat.datasource.jdbc.datasourceProvider.AtomikosDatasourceProvider
  timer: {initialDelay: 10, period: 5, timeUnit: SECONDS}
cluster: #集群,数据源选择器,既可以mycat自行检查数据源可用也可以通过mycat提供的外部接口设置设置数据源可用信息影响如何使用数据源
  close: true  #关闭集群心跳,此时集群认为所有数据源都是可用的,可以通过mycat提供的外部接口设置数据源可用信息达到相同效果
  clusters: [
  {name: repli ,
   replicaType: MASTER_SLAVE , # SINGLE_NODE:单一节点 ,MASTER_SLAVE:普通主从 GARELA_CLUSTER:garela cluster
   switchType: SWITCH , #NOT_SWITCH:不进行主从切换,SWITCH:进行主从切换
   readBalanceType: BALANCE_ALL  , #对于查询请求的负载均衡类型
   readBalanceName: BalanceRoundRobin , #对于查询请求的负载均衡类型
   writeBalanceName: BalanceRoundRobin ,  #对于修改请求的负载均衡类型
   masters:[defaultDs , defaultDs2], #主节点列表,普通主从,当主失去连接后,依次选择列表中存活的作为主节点
   replicas:[ defaultDs2],#从节点列表
   maxCon:, #集群最占用大连接限制
   heartbeat:{maxRetry: 3, #心跳重试次数
              minSwitchTimeInterval: 120000 , #最小主从切换间隔
              heartbeatTimeout: 100000 , #心跳超时值,毫秒
              slaveThreshold: 0 , # mysql binlog延迟值
              reuqestType: 'mysql' #进行心跳的方式,mysql或者jdbc两种
   }}
  ]
  timer: {initialDelay: 0, period: 1, timeUnit: SECONDS} #心跳定时器 initialDelay一般为0,mycat会在开启集群心跳,一个initialDelay+1秒之后开启服务器端口
server:
  ip: 0.0.0.0
  port: 8066
  reactorNumber: 1
  #用于多线程任务的线程池,
  worker: {close: false, #禁用多线程池,jdbc等功能将不能使用
           maxPengdingLimit: 65535, #每个线程处理任务队列的最大长度
           maxThread: 1000,
           minThread: 2,
           timeUnit: SECONDS,
           waitTaskTimeout: 5 #超时后将结束闲置的线程
  }
#负载均衡类型 BALANCE_ALL:所有数据源参与负载均衡 BALANCE_ALL_READ:所以非master数据源参与负载均衡 BALANCE_NONE:只有master(一个)参与负载
plug:
  loadBalance:
    defaultLoadBalance: balanceRandom
    loadBalances: [
    {name: BalanceRunOnMaster, clazz: io.mycat.plug.loadBalance.BalanceRunOnMaster},
    {name: BalanceLeastActive, clazz: io.mycat.plug.loadBalance.BalanceLeastActive},
    {name: BalanceRoundRobin, clazz: io.mycat.plug.loadBalance.BalanceRoundRobin},
    {name: BalanceRunOnReplica, clazz: io.mycat.plug.loadBalance.BalanceRunOnReplica},
    {name: BalanceRunOnRandomMaster, clazz: io.mycat.plug.loadBalance.BalanceRunOnRandomMaster}
    ]
  sequence:
    sequences: [
    {name: 'db1_travelrecord', clazz: io.mycat.plug.sequence.SequenceMySQLGenerator ,args: "sql : SELECT db1.mycat_seq_nextval('GLOBAL') , targetName:defaultDs"},
    {name: 'db1_address', clazz: io.mycat.plug.sequence.SequenceSnowflakeGenerator ,args: 'workerId:1'},
    ]

properties:
  key: value

#lib start
sqlGroups:
  jdbcAdapter:
    sqls: &jdbcAdapter [
    {name: explain,sql: 'EXPLAIN {statement}' ,command: explainSQL},
    {name: hbt,sql: 'execute plan {hbt}' , explain: '{hbt}' ,command: executePlan},#执行hbt
    {name: explainHbt,sql: 'explainPlan {hbt}' , explain: '{hbt}' ,command: explainPlan},#解释hbt
    {name: commit,sql: 'commit',command: commit},
    {name: begin; ,sql: 'begin',command: begin},
    {name: rollback ,sql: 'rollback',command: rollback},
    {name: useStatement ,sql: 'use {schema}',command: useStatement},
    {name: setXA ,sql: 'set xa = on',command: onXA},
    {name: setProxy ,sql: 'set xa = off',command: offXA},
    {name: setAutoCommitOff ,sql: 'set autocommit=off',command: setAutoCommitOff},
    {name: start transaction ,sql: ' START TRANSACTION ',command: begin},
    {name: setAutoCommitOn ,sql: 'set autocommit=on',command: setAutoCommitOn},
    {name: setTransactionIsolation ,sql: 'SET SESSION TRANSACTION ISOLATION LEVEL {transactionIsolation}',command: setTransactionIsolation},
    {name: mariadb-setAutoCommitOn,sql: 'set autocommit=1',command: setAutoCommitOn},
    {name: mariadb-variables,sql: 'SELECT @@max_allowed_packet,@@system_time_zone,@@time_zone,@@auto_increment_increment',command: execute , tags: {targets: defaultDs}},
    {name: mariadb-setAutoCommitOff,sql: 'set autocommit=0',command: setAutoCommitOff },
    {  name: mysql-variables,
       sql: 'SELECT  @@session.auto_increment_increment AS auto_increment_increment, @@character_set_client AS character_set_client, @@character_set_connection AS character_set_connection, @@character_set_results AS character_set_results, @@character_set_server AS character_set_server, @@collation_server AS collation_server, @@init_connect AS init_connect, @@interactive_timeout AS interactive_timeout, @@license AS license, @@lower_case_table_names AS lower_case_table_names, @@max_allowed_packet AS max_allowed_packet, @@net_write_timeout AS net_write_timeout, @@sql_mode AS sql_mode, @@system_time_zone AS system_time_zone, @@time_zone AS time_zone, @@transaction_isolation AS transaction_isolation, @@wait_timeout AS wait_timeout',
       explain: 'SELECT @@session.auto_increment_increment AS auto_increment_increment, @@character_set_client AS character_set_client, @@character_set_connection AS character_set_connection, @@character_set_results AS character_set_results, @@character_set_server AS character_set_server, @@collation_server AS collation_server, @@init_connect AS init_connect, @@interactive_timeout AS interactive_timeout, @@license AS license, @@lower_case_table_names AS lower_case_table_names, @@max_allowed_packet AS max_allowed_packet, @@net_write_timeout AS net_write_timeout, @@sql_mode AS sql_mode, @@system_time_zone AS system_time_zone, @@time_zone AS time_zone, @@tx_isolation AS transaction_isolation, @@wait_timeout AS wait_timeout'
      ,command: execute , tags: {targets: defaultDs,forceProxy: true}},
    {name: 'mysql SELECT @@session.transaction_read_only',sql: 'SELECT @@session.transaction_read_only',command: selectTransactionReadOnly , tags: {columnName: '@@session.transaction_read_only'}},
    {name: 'mysql SELECT @@session.tx_read_only',sql: 'SELECT @@session.tx_read_only',command: selectTransactionReadOnly , tags: {columnName: '@@session.tx_read_only'}},
    {name: 'mysql SELECT @@session.autocommit', sql: 'SELECT @@session.autocommit',command: selectAutocommit},
    {name: 'mysql SELECT  LAST_INSERT_ID()', sql: 'SELECT  LAST_INSERT_ID()',command: selectLastInsertId },
    {name: 'mysql set names', sql: 'set names {any}',command: ok },
    {name: 'mysql set character_set_results', sql: 'set character_set_results {any}',command: ok },
    {name: 'mysql set GLOBAL TRANSACTION', sql: 'set GLOBAL TRANSACTION {any}',command: ok },
    {name: 'mysql set session transaction', sql: 'set session transaction READ ONLY',command: ok },
    {name: 'mysql SET SQL_SELECT_LIMIT', sql: 'SET SQL_SELECT_LIMIT {any}',command: ok },
    {name: 'mysql SET net_write_timeout', sql: 'SET net_write_timeout {any}',command: ok },
    {name: 'mycat SELECT next_value_for', sql: 'SELECT next_value_for{xxx}',command: distributedQuery },
    ]
#lib end

