metadata: #读写分离无需配置
  schemas: [{
    schemaName: 'dev_01',
    targetName: 'repli',
    shadingTables: {
      user_test: {
        columns: [{
          columnName: id ,#分片字段信息,显式提供,
          shardingType: NATURE_DATABASE_TABLE ,#类型:自然分片,即根据一列(支持)或者多个列(暂不支持)的值映射成一个值,再根据该值通过单维度的分片算法计算出数据分片范围
          function: {
            clazz: io.mycat.router.function.PartitionByLong,
            properties: {partitionCount: '2', partitionLength: '512'},
            ranges: {}
          }
        }],
        createTableSQL: "CREATE TABLE `user_test` (`id` bigint(20) NOT NULL, `version` int(11) NOT NULL DEFAULT '0' COMMENT '版本号', `user_name` varchar(50) NOT NULL COMMENT '用户姓名', `mobile` varchar(20) DEFAULT NULL COMMENT '手机号码', `create_time` datetime NOT NULL COMMENT '创建时间', PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='mycat-demo-user0';",
        dataNodes: [{targetName: repli, schemaName: dev_01, tableName: user_test},
                    {targetName: repli, schemaName: dev_02, tableName: user_test}] #9999999999
      }
    }
  }]
interceptors: [
  {
    user: {ip: '.', password: '123456', username: root}
  },
  {
    user: {ip: '.', password: 'dev', username: yuwei}
  }
]
datasource:
  datasources: [{name: defaultDs, ip: db-mysql.yuweix.com,port: 3307,user: yuwei,password: dev,maxCon: 10000,minCon: 0,
                 maxRetryCount: 3, #连接重试次数
                 maxConnectTimeout: 10000, #连接超时时间 毫秒
                 dbType: mysql, #
                 url: 'jdbc:mysql://db-mysql.yuweix.com:3307?useUnicode=true&serverTimezone=UTC',
                 weight: 1, #负载均衡权重
                 initSqls: []
    , #建立连接后执行的sql,在此可以写上use xxx初始化默认database
                 instanceType:,#READ,WRITE,READ_WRITE ,集群信息中是主节点,则默认为读写,副本则为读,此属性可以强制指定可写,
                 initSqlsGetConnection: true
  },
    {name: defaultDs2, ip: db-mysql.yuweix.com,port: 3307,user: yuwei,password: dev,maxCon: 10000,minCon: 0,
     maxRetryCount: 3,
     maxConnectTimeout: 10000,
     dbType: mysql,
     url: 'jdbc:mysql://db-mysql.yuweix.com:3307?useUnicode=true&serverTimezone=UTC',
     weight: 1,
     initSqls: [],
     instanceType:,#READ,WRITE,READ_WRITE
     initSqlsGetConnection: true
    }
  ]
  datasourceProviderClass: io.mycat.datasource.jdbc.datasourceprovider.AtomikosDatasourceProvider
  timer: {initialDelay: 10, period: 5, timeUnit: SECONDS}
cluster: #集群,数据源选择器,既可以mycat自行检查数据源可用也可以通过mycat提供的外部接口设置设置数据源可用信息影响如何使用数据源
  close: true  #关闭集群心跳,此时集群认为所有数据源都是可用的,可以通过mycat提供的外部接口设置数据源可用信息达到相同效果
  clusters: [
    {name: repli ,
     replicaType: MASTER_SLAVE , # SINGLE_NODE:单一节点 ,MASTER_SLAVE:普通主从 GARELA_CLUSTER:garela cluster
     switchType: SWITCH , #NOT_SWITCH:不进行主从切换,SWITCH:进行主从切换
     readBalanceType: BALANCE_ALL  , #对于查询请求的负载均衡类型
     readBalanceName: BalanceRoundRobin , #对于查询请求的负载均衡类型
     writeBalanceName: BalanceRoundRobin ,  #对于修改请求的负载均衡类型
     masters:[defaultDs , defaultDs2], #主节点列表,普通主从,当主失去连接后,依次选择列表中存活的作为主节点
     replicas:[ defaultDs2],#从节点列表
     maxCon:, #集群最占用大连接限制
     heartbeat:{maxRetry: 3, #心跳重试次数
                minSwitchTimeInterval: 120000 , #最小主从切换间隔
                heartbeatTimeout: 100000 , #心跳超时值,毫秒
                slaveThreshold: 0 , # mysql binlog延迟值
                requestType: 'mysql' #进行心跳的方式,mysql或者jdbc两种
     }}
  ]
  timer: {initialDelay: 0, period: 1, timeUnit: SECONDS} #心跳定时器 initialDelay一般为0,mycat会在开启集群心跳,一个initialDelay+1秒之后开启服务器端口
#负载均衡类型 BALANCE_ALL:所有数据源参与负载均衡 BALANCE_ALL_READ:所以非master数据源参与负载均衡 BALANCE_NONE:只有master(一个)参与负载
plug:
  sequence:
    sequences: [
      {name: 'db1_travelrecord', clazz: io.mycat.plug.sequence.SequenceMySQLGenerator ,args: "sql : SELECT db1.mycat_seq_nextval('GLOBAL') , targetName:defaultDs"},
      {name: 'db1_address', clazz: io.mycat.plug.sequence.SequenceSnowflakeGenerator ,args: 'workerId:1'},
    ]
server:
  ip: 0.0.0.0
  port: 8066
  reactorNumber: 1
properties:
  key: value

#lib start
#lib end

